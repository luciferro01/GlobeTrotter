
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                @id @default(uuid())
  userName               String                @unique
  createdAt              DateTime              @default(now())
  gameSessions           GameSession[]
  // Challenge sessions that the user owns
  challengeSessions      ChallengeSession[]    @relation("OwnerChallengeSessions")
  // Participation in challenge sessions (could be anonymous if not registered)
  challengeParticipants  ChallengeParticipant[]
}

model Destination {
  id           String        @id @default(uuid())
  city         String
  country      String
  clues        String[]          
  funFact      String[]          
  trivia       String[]          
  imageUrl     String?       // Optional image-based clue
  createdAt    DateTime      @default(now())
  gameSessions GameSession[]
}

model GameSession {
  id              String       @id @default(uuid())
  userId          String?      // Nullable for anonymous users
  destinationId   String     // Array of destination IDs   
  score           Int          @default(0)
  wrongAnswers    Int          @default(0)
  status          String       @default("in_progress") // e.g., 'in_progress', 'completed'
  startTime       DateTime     @default(now())
  endTime         DateTime?    // Defined if using a timer-based session
  maxWrongAnswers Int          @default(2)
  updatedAt       DateTime     @updatedAt

  user            User?        @relation(fields: [userId], references: [id])
  destination     Destination  @relation(fields: [destinationId], references: [id])
}

model ChallengeSession {
  id           String                 @id @default(uuid())
  ownerId      String
  startTime    DateTime               @default(now())
  endTime      DateTime               // Pre-determined end time for the challenge
  status       String                 @default("in_progress")
  createdAt    DateTime               @default(now())

  owner        User                   @relation("OwnerChallengeSessions", fields: [ownerId], references: [id])
  participants ChallengeParticipant[]
  invites      ChallengeInvite[]
}

model ChallengeParticipant {
  id                 String            @id @default(uuid())
  challengeSessionId String
  userId             String?           // Optional for registered players
  temporaryId        String?           // For anonymous players
  score              Int               @default(0)
  joinedAt           DateTime          @default(now())

  challengeSession   ChallengeSession  @relation(fields: [challengeSessionId], references: [id])
  user               User?             @relation(fields: [userId], references: [id])
}

model ChallengeInvite {
  id                 String            @id @default(uuid())
  challengeSessionId String
  inviteLink         String            @unique
  ownerScore         Int               @default(0)
  createdAt          DateTime          @default(now())
  expiresAt          DateTime?         // Optional expiration for the invite

  challengeSession   ChallengeSession  @relation(fields: [challengeSessionId], references: [id])
}

